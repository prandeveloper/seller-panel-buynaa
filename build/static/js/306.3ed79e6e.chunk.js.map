{"version":3,"sources":["views/forms/formik/FormikBasic.js","views/forms/formik/FormikErrorMsg.js","views/forms/formik/FormikValidation.js","views/forms/formik/Formik.js"],"names":["FormikBasic","Card","CardHeader","CardTitle","CardBody","initialValues","firstName","lastName","email","onSubmit","values","setTimeout","toast","success","JSON","stringify","render","FormGroup","htmlFor","className","name","placeholder","type","Button","Ripple","color","React","Component","SignUpSchema","Yup","shape","required","min","max","FormikErrorMsg","validationSchema","errors","touched","component","msg","formSchema","number","url","date","minlength","maxlength","FormValidation","Label","for","id","Formik","Fragment","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","lg","md","sm","FormikValidation"],"mappings":"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","file":"static/js/306.3ed79e6e.chunk.js","sourcesContent":["import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Button,\n  FormGroup\n} from \"reactstrap\"\nimport { Formik, Field, Form } from \"formik\"\nimport { ToastContainer, toast } from \"react-toastify\"\nimport \"react-toastify/dist/ReactToastify.css\"\n\nclass FormikBasic extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Basic</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <p>\n            Getting values in and out of form state is easy using formik, you\n            won't have to manage state to make your input a controlled element.\n          </p>\n          <Formik\n            initialValues={{\n              firstName: \"\",\n              lastName: \"\",\n              email: \"\"\n            }}\n            onSubmit={values => {\n              setTimeout(() => {\n                toast.success(JSON.stringify(values, null, 2))\n              }, 500)\n            }}\n            render={() => (\n              <Form>\n                <FormGroup>\n                  <label htmlFor=\"firstName\">First Name</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"firstName\"\n                    placeholder=\"Jane\"\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <label htmlFor=\"lastName\">Last Name</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"lastName\"\n                    placeholder=\"Doe\"\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <label htmlFor=\"email\">Email</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"email\"\n                    placeholder=\"jane@acme.com\"\n                    type=\"email\"\n                  />\n                </FormGroup>\n                <Button.Ripple color=\"primary\" type=\"submit\">\n                  Submit\n                </Button.Ripple>\n              </Form>\n            )}\n          />\n          <ToastContainer />\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default FormikBasic\n","import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Button,\n  FormGroup\n} from \"reactstrap\"\nimport { Formik, Field, Form, ErrorMessage } from \"formik\"\nimport * as Yup from \"yup\"\n\nconst SignUpSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Invalid email address\")\n    .required(\"Required\"),\n  firstName: Yup.string()\n    .min(2, \"Must be longer than 2 characters\")\n    .max(20, \"Nice try, nobody has a first name that long\")\n    .required(\"Required\"),\n  lastName: Yup.string()\n    .min(2, \"Must be longer than 2 characters\")\n    .max(20, \"Nice try, nobody has a last name that long\")\n    .required(\"Required\")\n})\n\nclass FormikErrorMsg extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Error Msg</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <p>\n            You can show error messages with formik using{\" \"}\n            <code>validationSchema</code> prop with formik tag.\n          </p>\n          <Formik\n            initialValues={{\n              email: \"\",\n              firstName: \"\",\n              lastName: \"\"\n            }}\n            validationSchema={SignUpSchema}\n            render={({ errors, touched }) => (\n              <Form>\n                <FormGroup>\n                  <label htmlFor=\"firstName\">First Name</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"firstName\"\n                    placeholder=\"Jane\"\n                    type=\"text\"\n                  />\n                  <ErrorMessage\n                    name=\"firstName\"\n                    component=\"div\"\n                    className=\"field-error text-danger\"\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <label htmlFor=\"lastName\">Last Name</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"lastName\"\n                    placeholder=\"Doe\"\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"firstName\">\n                    {(msg /** this is the same as the above */) => (\n                      <div className=\"field-error text-danger\">{msg}</div>\n                    )}\n                  </ErrorMessage>\n                </FormGroup>\n\n                <FormGroup>\n                  <label htmlFor=\"email\">Email</label>\n                  <Field\n                    className=\"form-control\"\n                    name=\"email\"\n                    placeholder=\"jane@acme.com\"\n                    type=\"email\"\n                  />\n                  {/* This will render a string */}\n                  <ErrorMessage name=\"email\">\n                    {(msg /** this is the same as the above */) => (\n                      <div className=\"field-error text-danger\">{msg}</div>\n                    )}\n                  </ErrorMessage>\n                </FormGroup>\n\n                <Button.Ripple color=\"primary\" className=\"mt-1\" type=\"submit\">\n                  Submit\n                </Button.Ripple>\n              </Form>\n            )}\n          />\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default FormikErrorMsg\n","import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  FormGroup,\n  Button,\n  Label\n} from \"reactstrap\"\nimport { Formik, Field, Form } from \"formik\"\nimport * as Yup from \"yup\"\n\nconst formSchema = Yup.object().shape({\n  required: Yup.string().required(\"Required\"),\n  email: Yup.string()\n    .email(\"Invalid email\")\n    .required(\"Required\"),\n  number: Yup.number().required(\"Required\"),\n  url: Yup.string()\n    .url()\n    .required(\"Required\"),\n  date: Yup.date().required(\"Required\"),\n  minlength: Yup.string()\n    .min(4, \"Too Short!\")\n    .required(\"Required\"),\n  maxlength: Yup.string()\n    .max(5, \"Too Long!\")\n    .required(\"Required\")\n})\n\nclass FormValidation extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle> Validation</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Formik\n            initialValues={{\n              required: \"\",\n              email: \"\",\n              url: \"\",\n              number: \"\",\n              date: \"\",\n              minlength: \"\",\n              maxlength: \"\"\n            }}\n            validationSchema={formSchema}\n          >\n            {({ errors, touched }) => (\n              <Form>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"required\">Name</Label>\n                  <Field\n                    name=\"required\"\n                    id=\"required\"\n                    className={`form-control ${errors.required &&\n                      touched.required &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.required && touched.required ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.required}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"email\">Email</Label>\n                  <Field\n                    type=\"email\"\n                    name=\"email\"\n                    id=\"email\"\n                    className={`form-control ${errors.email &&\n                      touched.email &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.email && touched.email ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.email}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"url\">Website URL</Label>\n                  <Field\n                    name=\"url\"\n                    id=\"url\"\n                    className={`form-control ${errors.url &&\n                      touched.url &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.url && touched.url ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.url}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"number\">Number</Label>\n                  <Field\n                    name=\"number\"\n                    id=\"number\"\n                    className={`form-control ${errors.number &&\n                      touched.number &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.number && touched.number ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.number}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"date\">Date</Label>\n                  <Field\n                    type=\"date\"\n                    name=\"date\"\n                    id=\"date\"\n                    className={`form-control ${errors.date &&\n                      touched.date &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.date && touched.date ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.date}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"minlength\">\n                    Min Length (Minimum 4 Characters)\n                  </Label>\n                  <Field\n                    name=\"minlength\"\n                    id=\"minlength\"\n                    className={`form-control ${errors.minlength &&\n                      touched.minlength &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.minlength && touched.minlength ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.minlength}</div>\n                  ) : null}\n                </FormGroup>\n                <FormGroup className=\"my-3\">\n                  <Label for=\"maxlength\">\n                    Max Length (Maximum 5 Characters)\n                  </Label>\n                  <Field\n                    name=\"maxlength\"\n                    id=\"maxlength\"\n                    className={`form-control ${errors.maxlength &&\n                      touched.maxlength &&\n                      \"is-invalid\"}`}\n                  />\n                  {errors.maxlength && touched.maxlength ? (\n                    <div className=\"invalid-tooltip mt-25\">{errors.maxlength}</div>\n                  ) : null}\n                </FormGroup>\n                <Button.Ripple color=\"primary\" type=\"submit\">\n                  Submit\n                </Button.Ripple>\n              </Form>\n            )}\n          </Formik>\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default FormValidation\n","import React from \"react\"\nimport { Row, Col } from \"reactstrap\"\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\"\nimport FormikBasic from \"./FormikBasic\"\nimport FormikErrorMsg from \"./FormikErrorMsg\"\nimport FormikValidation from \"./FormikValidation\"\n\nclass Formik extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Breadcrumbs\n          breadCrumbTitle=\"Formik\"\n          breadCrumbParent=\"Form\"\n          breadCrumbActive=\"Formik\"\n        />\n        <Row>\n          <Col lg=\"6\" md=\"12\">\n            <FormikBasic />\n          </Col>\n          <Col lg=\"6\" md=\"12\">\n            <FormikErrorMsg />\n          </Col>\n          <Col sm=\"12\">\n            <FormikValidation />\n          </Col>\n        </Row>\n      </React.Fragment>\n    )\n  }\n}\nexport default Formik\n"],"sourceRoot":""}