{"version":3,"sources":["views/tables/aggrid/Aggrid.js"],"names":["AggridTable","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","field","width","filter","checkboxSelection","headerCheckboxSelectionFilteredOnly","headerCheckboxSelection","pinned","window","innerWidth","onGridReady","params","gridApi","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axios","get","then","response","data","JSON","stringify","this","Fragment","breadCrumbTitle","breadCrumbParent","breadCrumbActive","className","tag","length","size","right","onClick","placeholder","onChange","e","target","value","Ripple","color","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/307.a7d52133.chunk.js","sourcesContent":["import React from \"react\"\nimport {\n  Card,\n  CardBody,\n  Input,\n  Button,\n  UncontrolledDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\"\nimport { AgGridReact } from \"ag-grid-react\"\nimport { ContextLayout } from \"../../../utility/context/Layout\"\nimport { ChevronDown } from \"react-feather\"\nimport axios from \"axios\"\n\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\"\n\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\"\n\nclass AggridTable extends React.Component {\n  state = {\n    rowData: null,\n    paginationPageSize: 20,\n    currenPageSize: \"\",\n    getPageSize: \"\",\n    defaultColDef: {\n      sortable: true,\n      editable: true,\n      resizable: true,\n      suppressMenu: true\n    },\n    columnDefs: [\n      {\n        headerName: \"First Name\",\n        field: \"firstname\",\n        width: 175,\n        filter: true,\n        checkboxSelection: true,\n        headerCheckboxSelectionFilteredOnly: true,\n        headerCheckboxSelection: true\n      },\n      {\n        headerName: \"Last Name\",\n        field: \"lastname\",\n        filter: true,\n        width: 175\n      },\n      {\n        headerName: \"Email\",\n        field: \"email\",\n        filter: true,\n        width: 250,\n        pinned: window.innerWidth > 992 ? \"left\" : false\n      },\n      {\n        headerName: \"Company\",\n        field: \"company\",\n        filter: true,\n        width: 250\n      },\n      {\n        headerName: \"City\",\n        field: \"city\",\n        filter: true,\n        width: 150\n      },\n      {\n        headerName: \"Country\",\n        field: \"country\",\n        filter: true,\n        width: 150\n      },\n      {\n        headerName: \"State\",\n        field: \"state\",\n        filter: true,\n        width: 125\n      },\n      {\n        headerName: \"Zip\",\n        field: \"zip\",\n        filter: \"agNumberColumnFilter\",\n        width: 140\n      },\n      {\n        headerName: \"Followers\",\n        field: \"followers\",\n        filter: \"agNumberColumnFilter\",\n        width: 140\n      }\n    ]\n  }\n\n  componentDidMount() {\n    axios.get(\"/api/aggrid/data\").then(response => {\n      let rowData = response.data.data\n      JSON.stringify(rowData)\n      this.setState({ rowData })\n    })\n  }\n\n  onGridReady = params => {\n    this.gridApi = params.api\n    this.gridColumnApi = params.columnApi\n    this.setState({\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\n      getPageSize: this.gridApi.paginationGetPageSize(),\n      totalPages: this.gridApi.paginationGetTotalPages()\n    })\n  }\n\n  updateSearchQuery = val => {\n    this.gridApi.setQuickFilter(val)\n  }\n\n  filterSize = val => {\n    if (this.gridApi) {\n      this.gridApi.paginationSetPageSize(Number(val))\n      this.setState({\n        currenPageSize: val,\n        getPageSize: val\n      })\n    }\n  }\n\n  render() {\n    const { rowData, columnDefs, defaultColDef } = this.state\n    return (\n      <React.Fragment>\n        <Breadcrumbs\n          breadCrumbTitle=\"Aggrid Table\"\n          breadCrumbParent=\"Forms & Tables\"\n          breadCrumbActive=\"Aggrid Table\"\n        />\n        <Card className=\"overflow-hidden agGrid-card\">\n          <CardBody className=\"py-0\">\n            {this.state.rowData === null ? null : (\n              <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\n                <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\n                  <div className=\"mb-1\">\n                    <UncontrolledDropdown className=\"p-1 ag-dropdown\">\n                      <DropdownToggle tag=\"div\">\n                        {this.gridApi\n                          ? this.state.currenPageSize\n                          : \"\" * this.state.getPageSize -\n                            (this.state.getPageSize - 1)}{\" \"}\n                        -{\" \"}\n                        {this.state.rowData.length -\n                          this.state.currenPageSize * this.state.getPageSize >\n                        0\n                          ? this.state.currenPageSize * this.state.getPageSize\n                          : this.state.rowData.length}{\" \"}\n                        of {this.state.rowData.length}\n                        <ChevronDown className=\"ml-50\" size={15} />\n                      </DropdownToggle>\n                      <DropdownMenu right>\n                        <DropdownItem\n                          tag=\"div\"\n                          onClick={() => this.filterSize(20)}\n                        >\n                          20\n                        </DropdownItem>\n                        <DropdownItem\n                          tag=\"div\"\n                          onClick={() => this.filterSize(50)}\n                        >\n                          50\n                        </DropdownItem>\n                        <DropdownItem\n                          tag=\"div\"\n                          onClick={() => this.filterSize(100)}\n                        >\n                          100\n                        </DropdownItem>\n                        <DropdownItem\n                          tag=\"div\"\n                          onClick={() => this.filterSize(134)}\n                        >\n                          134\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </UncontrolledDropdown>\n                  </div>\n                  <div className=\"d-flex flex-wrap justify-content-between mb-1\">\n                    <div className=\"table-input mr-1\">\n                      <Input\n                        placeholder=\"search...\"\n                        onChange={e => this.updateSearchQuery(e.target.value)}\n                        value={this.state.value}\n                      />\n                    </div>\n                    <div className=\"export-btn\">\n                      <Button.Ripple\n                        color=\"primary\"\n                        onClick={() => this.gridApi.exportDataAsCsv()}\n                      >\n                        Export as CSV\n                      </Button.Ripple>\n                    </div>\n                  </div>\n                </div>\n                <ContextLayout.Consumer>\n                  {context => (\n                    <AgGridReact\n                      gridOptions={{}}\n                      rowSelection=\"multiple\"\n                      defaultColDef={defaultColDef}\n                      columnDefs={columnDefs}\n                      rowData={rowData}\n                      onGridReady={this.onGridReady}\n                      colResizeDefault={\"shift\"}\n                      animateRows={true}\n                      floatingFilter={true}\n                      pagination={true}\n                      paginationPageSize={this.state.paginationPageSize}\n                      pivotPanelShow=\"always\"\n                      enableRtl={context.state.direction === \"rtl\"}\n                    />\n                  )}\n                </ContextLayout.Consumer>\n              </div>\n            )}\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default AggridTable\n"],"sourceRoot":""}