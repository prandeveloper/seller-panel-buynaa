{"version":3,"sources":["views/apps/website/blog/BlogList.js","axiosConfig.js"],"names":["BlogList","state","rowData","pageSize","isVisible","reload","collapse","status","role","selectStatus","verified","department","defaultColDef","sortable","searchVal","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","format","data","createdAt","src","blog_img","alt","height","category","blog_title","short_desc","full_desc","size","onClick","selectedData","gridApi","getSelectedRows","runthisfunction","_id","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","filterData","column","val","modelObj","type","getFilterInstance","setModel","onFilterChanged","filterSize","paginationSetPageSize","Number","setState","updateSearchQuery","setQuickFilter","refreshCard","setTimeout","toggleCollapse","onEntered","onEntering","onExiting","onExited","removeCard","a","axiosConfig","get","then","response","id","console","log","this","sm","col-sm-6","history","push","tag","currenPageSize","getPageSize","length","right","placeholder","onChange","e","target","value","Ripple","color","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","paginationPageSize","pivotPanelShow","enableRtl","direction","React","Component","instance","axios","create","baseURL"],"mappings":"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","file":"static/js/131.8c467891.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\n\r\nimport { Edit, Trash2, ChevronDown } from \"react-feather\";\r\n//import classnames from \"classnames\";\r\nimport { history } from \"../../../../history\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport Moment from \"react-moment\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\n\r\nclass BlogList extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    pageSize: 20,\r\n    isVisible: true,\r\n    reload: false,\r\n    collapse: true,\r\n    status: \"Opened\",\r\n    role: \"All\",\r\n    selectStatus: \"All\",\r\n    verified: \"All\",\r\n    department: \"All\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n    },\r\n    searchVal: \"\",\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.no\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"sortorder\",\r\n        width: 120,\r\n        filter: true,\r\n        // checkboxSelection: true,\r\n        // headerCheckboxSelectionFilteredOnly: true,\r\n        // headerCheckboxSelection: true,\r\n      },\r\n      {\r\n        headerName: \"Posted Date\",\r\n        field: \"createdAt\",\r\n\r\n        filter: \"agSetColumnFilter\",\r\n        width: 220,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <div className=\"\">\r\n                <Moment format=\"llll\">{params.data.createdAt}</Moment>\r\n                {/* <span>{params.data.createdAt}</span> */}\r\n              </div>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Image\",\r\n        field: \"blog_img\",\r\n        filter: true,\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <img\r\n                className=\"rounded-circle mr-50\"\r\n                src={params.data.blog_img}\r\n                alt=\"user avatar\"\r\n                height=\"40\"\r\n                width=\"40\"\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Blog Category\",\r\n        field: \"category\",\r\n        //filter: true,\r\n        filter: \"agSetColumnFilter\",\r\n        width: 180,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <div className=\"\">\r\n                <span>{params.data.category}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Blog Title\",\r\n        field: \"blog_title\",\r\n        //filter: true,\r\n        filter: \"agSetColumnFilter\",\r\n        width: 180,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <div className=\"\">\r\n                <span>{params.data.blog_title}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Short Description\",\r\n        field: \"short_desc\",\r\n        //filter: true,\r\n        filter: \"agSetColumnFilter\",\r\n        width: 180,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <div className=\"\">\r\n                <span>{params.data.short_desc}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Description\",\r\n        field: \"full_desc\",\r\n        //filter: true,\r\n        filter: \"agSetColumnFilter\",\r\n        width: 180,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <div className=\"\">\r\n                <span>{params.data.full_desc}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"transactions\",\r\n        width: 150,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Edit className=\"mr-50\" size={20} />\r\n              <Trash2\r\n                size={20}\r\n                onClick={() => {\r\n                  let selectedData = this.gridApi.getSelectedRows();\r\n                  this.runthisfunction(params.data._id);\r\n                  this.gridApi.updateRowData({ remove: selectedData });\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await axiosConfig.get(\"/allblog\").then((response) => {\r\n      let rowData = response.data.data;\r\n      this.setState({ rowData });\r\n    });\r\n  }\r\n\r\n  async runthisfunction(id) {\r\n    console.log(id);\r\n    await axiosConfig.get(`/delblog/${id}`).then((response) => {\r\n      console.log(response);\r\n    });\r\n  }\r\n\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n  };\r\n\r\n  filterData = (column, val) => {\r\n    var filter = this.gridApi.getFilterInstance(column);\r\n    var modelObj = null;\r\n    if (val !== \"all\") {\r\n      modelObj = {\r\n        type: \"equals\",\r\n        filter: val,\r\n      };\r\n    }\r\n    filter.setModel(modelObj);\r\n    this.gridApi.onFilterChanged();\r\n  };\r\n\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        pageSize: val,\r\n      });\r\n    }\r\n  };\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n    this.setState({\r\n      searchVal: val,\r\n    });\r\n  };\r\n\r\n  refreshCard = () => {\r\n    this.setState({ reload: true });\r\n    setTimeout(() => {\r\n      this.setState({\r\n        reload: false,\r\n        role: \"All\",\r\n        selectStatus: \"All\",\r\n        verified: \"All\",\r\n        department: \"All\",\r\n      });\r\n    }, 500);\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState((state) => ({ collapse: !state.collapse }));\r\n  };\r\n  onEntered = () => {\r\n    this.setState({ status: \"Opened\" });\r\n  };\r\n  onEntering = () => {\r\n    this.setState({ status: \"Opening...\" });\r\n  };\r\n\r\n  onEntered = () => {\r\n    this.setState({ status: \"Opened\" });\r\n  };\r\n  onExiting = () => {\r\n    this.setState({ status: \"Closing...\" });\r\n  };\r\n  onExited = () => {\r\n    this.setState({ status: \"Closed\" });\r\n  };\r\n  removeCard = () => {\r\n    this.setState({ isVisible: false });\r\n  };\r\n\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      <Row className=\"app-user-list\">\r\n        <Col sm=\"12\">\r\n          {/* <Card\r\n            className={classnames(\"card-action card-reload\", {\r\n              \"d-none\": this.state.isVisible === false,\r\n              \"card-collapsed\": this.state.status === \"Closed\",\r\n              closing: this.state.status === \"Closing...\",\r\n              opening: this.state.status === \"Opening...\",\r\n              refreshing: this.state.reload,\r\n            })}\r\n          >\r\n            <CardHeader>\r\n              <CardTitle>Filters</CardTitle>\r\n              <div className=\"actions\">\r\n                <ChevronDown\r\n                  className=\"collapse-icon mr-50\"\r\n                  size={15}\r\n                  onClick={this.toggleCollapse}\r\n                />\r\n                <RotateCw\r\n                  className=\"mr-50\"\r\n                  size={15}\r\n                  onClick={() => {\r\n                    this.refreshCard();\r\n                    this.gridApi.setFilterModel(null);\r\n                  }}\r\n                />\r\n                <X size={15} onClick={this.removeCard} />\r\n              </div>\r\n            </CardHeader>\r\n            <Collapse\r\n              isOpen={this.state.collapse}\r\n              onExited={this.onExited}\r\n              onEntered={this.onEntered}\r\n              onExiting={this.onExiting}\r\n              onEntering={this.onEntering}\r\n            >\r\n              <CardBody>\r\n                {this.state.reload ? (\r\n                  <Spinner color=\"primary\" className=\"reload-spinner\" />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <Row>\r\n                  <Col lg=\"3\" md=\"6\" sm=\"12\">\r\n                    <FormGroup className=\"mb-0\">\r\n                      <Label for=\"role\">Role</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"role\"\r\n                        id=\"role\"\r\n                        value={this.state.role}\r\n                        onChange={(e) => {\r\n                          this.setState(\r\n                            {\r\n                              role: e.target.value,\r\n                            },\r\n                            () =>\r\n                              this.filterData(\r\n                                \"role\",\r\n                                this.state.role.toLowerCase()\r\n                              )\r\n                          );\r\n                        }}\r\n                      >\r\n                        <option value=\"All\">All</option>\r\n                        <option value=\"User\">User</option>\r\n                        <option value=\"Staff\">Staff</option>\r\n                        <option value=\"Admin\">Admin</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg=\"3\" md=\"6\" sm=\"12\">\r\n                    <FormGroup className=\"mb-0\">\r\n                      <Label for=\"status\">Status</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"status\"\r\n                        id=\"status\"\r\n                        value={this.state.selectStatus}\r\n                        onChange={(e) => {\r\n                          this.setState(\r\n                            {\r\n                              selectStatus: e.target.value,\r\n                            },\r\n                            () =>\r\n                              this.filterData(\r\n                                \"status\",\r\n                                this.state.selectStatus.toLowerCase()\r\n                              )\r\n                          );\r\n                        }}\r\n                      >\r\n                        <option value=\"All\">All</option>\r\n                        <option value=\"Active\">Active</option>\r\n                        <option value=\"Blocked\">Blocked</option>\r\n                        <option value=\"Deactivated\">Deactivated</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg=\"3\" md=\"6\" sm=\"12\">\r\n                    <FormGroup className=\"mb-0\">\r\n                      <Label for=\"verified\">Verified</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"verified\"\r\n                        id=\"verified\"\r\n                        value={this.state.verified}\r\n                        onChange={(e) => {\r\n                          this.setState(\r\n                            {\r\n                              verified: e.target.value,\r\n                            },\r\n                            () =>\r\n                              this.filterData(\r\n                                \"is_verified\",\r\n                                this.state.verified.toLowerCase()\r\n                              )\r\n                          );\r\n                        }}\r\n                      >\r\n                        <option value=\"All\">All</option>\r\n                        <option value=\"True\">True</option>\r\n                        <option value=\"False\">False</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg=\"3\" md=\"6\" sm=\"12\">\r\n                    <FormGroup className=\"mb-0\">\r\n                      <Label for=\"department\">Department</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"department\"\r\n                        id=\"department\"\r\n                        value={this.state.department}\r\n                        onChange={(e) => {\r\n                          this.setState(\r\n                            {\r\n                              department: e.target.value,\r\n                            },\r\n                            () =>\r\n                              this.filterData(\r\n                                \"department\",\r\n                                this.state.department.toLowerCase()\r\n                              )\r\n                          );\r\n                        }}\r\n                      >\r\n                        <option value=\"All\">All</option>\r\n                        <option value=\"Sales\">Sales</option>\r\n                        <option value=\"Development\">Development</option>\r\n                        <option value=\"Management\">Management</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Collapse>\r\n          </Card> */}\r\n        </Col>\r\n        <Col sm=\"12\">\r\n          <Card>\r\n            <Row className=\"m-2\">\r\n              <Col>\r\n                <h1 col-sm-6 className=\"float-left\">\r\n                  Blog List\r\n                </h1>\r\n              </Col>\r\n              <Col>\r\n                <Button\r\n                  className=\" btn btn-danger float-right\"\r\n                  onClick={() => history.push(\"/app/website/blog/addBlog\")}\r\n                >\r\n                  Add New Blog\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <CardBody>\r\n              {this.state.rowData === null ? null : (\r\n                <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                  <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                    <div className=\"mb-1\">\r\n                      <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                        <DropdownToggle tag=\"div\">\r\n                          {this.gridApi\r\n                            ? this.state.currenPageSize\r\n                            : \"\" * this.state.getPageSize -\r\n                              (this.state.getPageSize - 1)}{\" \"}\r\n                          -{\" \"}\r\n                          {this.state.rowData.length -\r\n                            this.state.currenPageSize * this.state.getPageSize >\r\n                          0\r\n                            ? this.state.currenPageSize * this.state.getPageSize\r\n                            : this.state.rowData.length}{\" \"}\r\n                          of {this.state.rowData.length}\r\n                          <ChevronDown className=\"ml-50\" size={15} />\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(20)}\r\n                          >\r\n                            20\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(50)}\r\n                          >\r\n                            50\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(100)}\r\n                          >\r\n                            100\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(134)}\r\n                          >\r\n                            134\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                    <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                      <div className=\"table-input mr-1\">\r\n                        <Input\r\n                          placeholder=\"search...\"\r\n                          onChange={(e) =>\r\n                            this.updateSearchQuery(e.target.value)\r\n                          }\r\n                          value={this.state.value}\r\n                        />\r\n                      </div>\r\n                      <div className=\"export-btn\">\r\n                        <Button.Ripple\r\n                          color=\"primary\"\r\n                          onClick={() => this.gridApi.exportDataAsCsv()}\r\n                        >\r\n                          Export as CSV\r\n                        </Button.Ripple>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <ContextLayout.Consumer>\r\n                    {(context) => (\r\n                      <AgGridReact\r\n                        gridOptions={{}}\r\n                        rowSelection=\"multiple\"\r\n                        defaultColDef={defaultColDef}\r\n                        columnDefs={columnDefs}\r\n                        rowData={rowData}\r\n                        onGridReady={this.onGridReady}\r\n                        colResizeDefault={\"shift\"}\r\n                        animateRows={true}\r\n                        floatingFilter={false}\r\n                        pagination={true}\r\n                        paginationPageSize={this.state.paginationPageSize}\r\n                        pivotPanelShow=\"always\"\r\n                        enableRtl={context.state.direction === \"rtl\"}\r\n                      />\r\n                    )}\r\n                  </ContextLayout.Consumer>\r\n                </div>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlogList;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://35.154.86.59/api/admin\",\r\n  \r\n});\r\n\r\nexport default instance;\r\n"],"sourceRoot":""}